{
  "Array_Creation": {
    "array": {
      "Name": "Array",
      "Description": "Creates a new array from a list or tuple.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "data",
          "type": "list or tuple",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Converts a list into a NumPy array.",
        "Code": "np.array([1, 2, 3])",
        "Result": "[1, 2, 3]"
      }
    },
    "zeros": {
      "Name": "Zeros",
      "Description": "Creates an array filled with zeros.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "shape",
          "type": "tuple of integers",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Creates a 2x3 array filled with zeros.",
        "Code": "np.zeros((2, 3))",
        "Result": "[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]"
      }
    },
    "ones": {
      "Name": "Ones",
      "Description": "Creates an array filled with ones.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "shape",
          "type": "tuple of integers",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Creates a 2x2 array filled with ones.",
        "Code": "np.ones((2, 2))",
        "Result": "[[1.0, 1.0], [1.0, 1.0]]"
      }
    },
    "full": {
      "Name": "Full",
      "Description": "Creates an array filled with a constant value.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "shape",
          "type": "tuple of integers",
          "target": true
        },
        {
          "name": "fill_value",
          "type": "number",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Creates a 3x3 array filled with the value 7.",
        "Code": "np.full((3, 3), 7)",
        "Result": "[[7, 7, 7], [7, 7, 7], [7, 7, 7]]"
      }
    },
    "empty": {
      "Name": "Empty",
      "Description": "Creates an uninitialized array with the specified shape.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "shape",
          "type": "tuple of integers",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Creates a 2x2 array with uninitialized values.",
        "Code": "np.empty((2, 2))",
        "Result": "Uninitialized array with random values."
      }
    },
    "arange": {
      "Name": "Arange",
      "Description": "Creates an array with evenly spaced values within a specified range.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "start",
          "type": "number",
          "target": true
        },
        {
          "name": "stop",
          "type": "number",
          "target": true
        },
        {
          "name": "step",
          "type": "number",
          "target": false
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Creates an array with values from 0 to 9.",
        "Code": "np.arange(0, 10)",
        "Result": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      }
    },
    "linspace": {
      "Name": "Linspace",
      "Description": "Creates an array with a specified number of evenly spaced values between two numbers.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "start",
          "type": "number",
          "target": true
        },
        {
          "name": "stop",
          "type": "number",
          "target": true
        },
        {
          "name": "num",
          "type": "integer",
          "target": false
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Creates an array with 5 evenly spaced values between 0 and 1.",
        "Code": "np.linspace(0, 1, 5)",
        "Result": "[0.0, 0.25, 0.5, 0.75, 1.0]"
      }
    },
    "eye": {
      "Name": "Eye",
      "Description": "Creates a 2D identity matrix.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "n",
          "type": "integer",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Creates a 3x3 identity matrix.",
        "Code": "np.eye(3)",
        "Result": "[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]"
      }
    },
    "random.rand": {
      "Name": "Random Rand",
      "Description": "Generates an array with random values from a uniform distribution over [0, 1).",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "shape",
          "type": "tuple of integers",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Generates a 2x2 array with random values.",
        "Code": "np.random.rand(2, 2)",
        "Result": "Random values in a 2x2 array."
      }
    },
    "random.randn": {
      "Name": "Random Randn",
      "Description": "Generates an array with random values from a standard normal distribution.",
      "Type": "Array Creation",
      "Inputs": [
        {
          "name": "shape",
          "type": "tuple of integers",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "array",
          "type": "numpy array",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Generates a 2x2 array with random normal values.",
        "Code": "np.random.randn(2, 2)",
        "Result": "Random normal values in a 2x2 array."
      }
    }
  },
  "Array_Shape_&_Reshaping": {
    "shape": {
      "Name": "Shape",
      "Description": "Gets the shape of an array as a tuple of dimensions.",
      "Type": "Array Shape and Reshaping",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "shape", "type": "tuple of integers", "source": true }],
      "Example": {
        "Explanation": "Get the shape of a 2x3 array.",
        "Code": "np.shape(np.array([[1, 2, 3], [4, 5, 6]]))",
        "Result": "(2, 3)"
      }
    },
    "reshape": {
      "Name": "Reshape",
      "Description": "Reshapes an array to a specified shape without changing its data.",
      "Type": "Array Shape and Reshaping",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "new_shape", "type": "tuple of integers", "target": true }
      ],
      "Outputs": [{ "name": "reshaped_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Reshape a 1D array into a 2x3 array.",
        "Code": "np.reshape(np.array([1, 2, 3, 4, 5, 6]), (2, 3))",
        "Result": "[[1, 2, 3], [4, 5, 6]]"
      }
    },
    "ravel": {
      "Name": "Ravel",
      "Description": "Flattens an array into a 1D array.",
      "Type": "Array Shape and Reshaping",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "flattened_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Flatten a 2D array into a 1D array.",
        "Code": "np.ravel(np.array([[1, 2, 3], [4, 5, 6]]))",
        "Result": "[1, 2, 3, 4, 5, 6]"
      }
    },
    "flatten": {
      "Name": "Flatten",
      "Description": "Returns a copy of a flattened array.",
      "Type": "Array Shape and Reshaping",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "flattened_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Flatten a 2D array into a 1D array.",
        "Code": "np.array([[1, 2], [3, 4]]).flatten()",
        "Result": "[1, 2, 3, 4]"
      }
    },
    "transpose": {
      "Name": "Transpose",
      "Description": "Transposes an array by swapping its axes.",
      "Type": "Array Shape and Reshaping",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "transposed_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Transpose a 2x3 array into a 3x2 array.",
        "Code": "np.transpose(np.array([[1, 2, 3], [4, 5, 6]]))",
        "Result": "[[1, 4], [2, 5], [3, 6]]"
      }
    },
    "swapaxes": {
      "Name": "Swap Axes",
      "Description": "Swaps two axes of an array.",
      "Type": "Array Shape and Reshaping",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "axis1", "type": "integer", "target": true },
        { "name": "axis2", "type": "integer", "target": true }
      ],
      "Outputs": [{ "name": "swapped_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Swap axes 0 and 1 of a 2x3 array.",
        "Code": "np.swapaxes(np.array([[1, 2, 3], [4, 5, 6]]), 0, 1)",
        "Result": "[[1, 4], [2, 5], [3, 6]]"
      }
    },
    "expand_dims": {
      "Name": "Expand Dimensions",
      "Description": "Expands the shape of an array by adding a new axis.",
      "Type": "Array Shape and Reshaping",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "axis", "type": "integer", "target": true }
      ],
      "Outputs": [{ "name": "expanded_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Expand the dimensions of a 1D array.",
        "Code": "np.expand_dims(np.array([1, 2, 3]), axis=0)",
        "Result": "[[1, 2, 3]]"
      }
    },
    "squeeze": {
      "Name": "Squeeze",
      "Description": "Removes single-dimensional entries from the shape of an array.",
      "Type": "Array Shape and Reshaping",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "squeezed_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Remove single-dimensional entries from a 3D array.",
        "Code": "np.squeeze(np.array([[[1, 2, 3]]]))",
        "Result": "[[1, 2, 3]]"
      }
    }
  },
  "Concatenation_&_Splitting": {
    "concatenate": {
      "Name": "Concatenate",
      "Description": "Joins a sequence of arrays along an existing axis.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [
        { "name": "arrays", "type": "list of numpy arrays", "target": true },
        { "name": "axis", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "joined_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Join two arrays along the first axis.",
        "Code": "np.concatenate([np.array([1, 2]), np.array([3, 4])])",
        "Result": "[1, 2, 3, 4]"
      }
    },
    "stack": {
      "Name": "Stack",
      "Description": "Stacks arrays along a new axis.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [
        { "name": "arrays", "type": "list of numpy arrays", "target": true },
        { "name": "axis", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "stacked_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Stack two 1D arrays along a new axis.",
        "Code": "np.stack([np.array([1, 2]), np.array([3, 4])], axis=0)",
        "Result": "[[1, 2], [3, 4]]"
      }
    },
    "vstack": {
      "Name": "Vertical Stack",
      "Description": "Stacks arrays vertically.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [{ "name": "arrays", "type": "list of numpy arrays", "target": true }],
      "Outputs": [{ "name": "stacked_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Stack two 1D arrays into a 2D array vertically.",
        "Code": "np.vstack([np.array([1, 2]), np.array([3, 4])])",
        "Result": "[[1, 2], [3, 4]]"
      }
    },
    "hstack": {
      "Name": "Horizontal Stack",
      "Description": "Stacks arrays horizontally.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [{ "name": "arrays", "type": "list of numpy arrays", "target": true }],
      "Outputs": [{ "name": "stacked_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Stack two 1D arrays into a single array horizontally.",
        "Code": "np.hstack([np.array([1, 2]), np.array([3, 4])])",
        "Result": "[1, 2, 3, 4]"
      }
    },
    "dstack": {
      "Name": "Depth Stack",
      "Description": "Stacks arrays along the depth axis.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [{ "name": "arrays", "type": "list of numpy arrays", "target": true }],
      "Outputs": [{ "name": "stacked_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Stack two 1D arrays along a new depth axis.",
        "Code": "np.dstack([np.array([1, 2]), np.array([3, 4])])",
        "Result": "[[[1, 3], [2, 4]]]"
      }
    },
    "split": {
      "Name": "Split",
      "Description": "Splits an array into multiple subarrays along a specified axis.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "indices", "type": "integer", "target": true },
        { "name": "axis", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "subarrays", "type": "list of numpy arrays", "source": true }],
      "Example": {
        "Explanation": "Split a 1D array into 3 equal subarrays.",
        "Code": "np.split(np.array([1, 2, 3, 4, 5, 6]), 3)",
        "Result": "[[1, 2], [3, 4], [5, 6]]"
      }
    },
    "array_split": {
      "Name": "Array Split",
      "Description": "Splits an array into subarrays with unequal sizes.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "sections", "type": "integer", "target": true }
      ],
      "Outputs": [{ "name": "subarrays", "type": "list of numpy arrays", "source": true }],
      "Example": {
        "Explanation": "Split a 1D array into 3 subarrays with unequal sizes.",
        "Code": "np.array_split(np.array([1, 2, 3, 4, 5, 6]), 3)",
        "Result": "[[1, 2], [3, 4], [5, 6]]"
      }
    },
    "hsplit": {
      "Name": "Horizontal Split",
      "Description": "Splits an array horizontally into subarrays.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "indices", "type": "integer", "target": true }
      ],
      "Outputs": [{ "name": "subarrays", "type": "list of numpy arrays", "source": true }],
      "Example": {
        "Explanation": "Split a 2D array horizontally into 2 equal parts.",
        "Code": "np.hsplit(np.array([[1, 2, 3], [4, 5, 6]]), 2)",
        "Result": "[[[1, 2]], [[3, 4]]]"
      }
    },
    "vsplit": {
      "Name": "Vertical Split",
      "Description": "Splits an array vertically into subarrays.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "indices", "type": "integer", "target": true }
      ],
      "Outputs": [{ "name": "subarrays", "type": "list of numpy arrays", "source": true }],
      "Example": {
        "Explanation": "Split a 2D array vertically into 2 equal parts.",
        "Code": "np.vsplit(np.array([[1, 2], [3, 4], [5, 6]]), 3)",
        "Result": "[[1, 2], [3, 4], [5, 6]]"
      }
    },
    "dsplit": {
      "Name": "Depth Split",
      "Description": "Splits an array along the depth axis.",
      "Type": "Array Concatenation and Splitting",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "indices", "type": "integer", "target": true }
      ],
      "Outputs": [{ "name": "subarrays", "type": "list of numpy arrays", "source": true }],
      "Example": {
        "Explanation": "Split a 3D array along its depth axis.",
        "Code": "np.dsplit(np.array([[[1, 2], [3, 4]]]), 2)",
        "Result": "[[[1], [3]], [[2], [4]]]"
      }
    }
  },
  "Indexing_&_Slicing": {
    "take": {
      "Name": "Take",
      "Description": "Extracts elements along a specified axis.",
      "Type": "Indexing and Slicing",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "indices", "type": "list of integers", "target": true },
        { "name": "axis", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Extract elements at indices [0, 2] along axis 0.",
        "Code": "np.take(np.array([[1, 2], [3, 4], [5, 6]]), [0, 2], axis=0)",
        "Result": "[[1, 2], [5, 6]]"
      }
    },
    "put": {
      "Name": "Put",
      "Description": "Replaces elements in an array at specified indices.",
      "Type": "Indexing and Slicing",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "indices", "type": "list of integers", "target": true },
        { "name": "values", "type": "list of numbers", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Replace elements at indices [0, 2] with [7, 8].",
        "Code": "arr = np.array([1, 2, 3, 4]); np.put(arr, [0, 2], [7, 8])",
        "Result": "[7, 2, 8, 4]"
      }
    },
    "where": {
      "Name": "Where",
      "Description": "Returns indices of elements that satisfy a condition.",
      "Type": "Indexing and Slicing",
      "Inputs": [{ "name": "condition", "type": "boolean condition", "target": true }],
      "Outputs": [{ "name": "indices", "type": "list of tuples", "source": true }],
      "Example": {
        "Explanation": "Find indices of elements greater than 2.",
        "Code": "np.where(np.array([1, 2, 3, 4]) > 2)",
        "Result": "(array([2, 3]),)"
      }
    },
    "argmax": {
      "Name": "Argmax",
      "Description": "Finds the index of the maximum value in an array.",
      "Type": "Indexing and Slicing",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "axis", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "index", "type": "integer", "source": true }],
      "Example": {
        "Explanation": "Find index of the maximum value along axis 1.",
        "Code": "np.argmax(np.array([[1, 3, 2], [4, 5, 6]]), axis=1)",
        "Result": "[1, 2]"
      }
    },
    "nonzero": {
      "Name": "Nonzero",
      "Description": "Returns indices of non-zero elements.",
      "Type": "Indexing and Slicing",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "indices", "type": "tuple of arrays", "source": true }],
      "Example": {
        "Explanation": "Find indices of non-zero elements.",
        "Code": "np.nonzero(np.array([0, 1, 0, 3]))",
        "Result": "(array([1, 3]),)"
      }
    }
  },
  "Sorting_&_Searching": {
    "sort": {
      "Name": "Sort",
      "Description": "Sorts an array.",
      "Type": "Sorting and Searching",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "axis", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "sorted_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Sort a 1D array in ascending order.",
        "Code": "np.sort(np.array([3, 1, 4, 1]))",
        "Result": "[1, 1, 3, 4]"
      }
    },
    "argsort": {
      "Name": "Argsort",
      "Description": "Returns indices that would sort an array.",
      "Type": "Sorting and Searching",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "indices", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Find indices that would sort a 1D array.",
        "Code": "np.argsort(np.array([3, 1, 4, 1]))",
        "Result": "[1, 3, 0, 2]"
      }
    },
    "partition": {
      "Name": "Partition",
      "Description": "Partitions an array into two parts: elements smaller than a pivot and others.",
      "Type": "Sorting and Searching",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "kth", "type": "integer", "target": true }
      ],
      "Outputs": [{ "name": "partitioned_array", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Partition array so the smallest 3 elements come first.",
        "Code": "np.partition(np.array([7, 2, 5, 3]), 3)",
        "Result": "[2, 3, 5, 7]"
      }
    },
    "searchsorted": {
      "Name": "Searchsorted",
      "Description": "Finds indices where elements should be inserted to maintain order.",
      "Type": "Sorting and Searching",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "values", "type": "list of numbers", "target": true },
        { "name": "side", "type": "string", "target": false }
      ],
      "Outputs": [{ "name": "indices", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Find positions to insert elements to maintain order.",
        "Code": "np.searchsorted([1, 3, 5, 7], [2, 4, 6])",
        "Result": "[1, 2, 3]"
      }
    }
  },
  "Arithmetic_&_Logical_Ops": {
    "add": {
      "Name": "Add",
      "Description": "Adds numbers in two arrays element by element.",
      "Type": "Arithmetic Operation",
      "Inputs": [
        { "name": "array1", "type": "numpy array", "target": true },
        { "name": "array2", "type": "numpy array", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Add two arrays element by element.",
        "Code": "np.add([1, 2, 3], [4, 5, 6])",
        "Result": "[5, 7, 9]"
      },
      "Value": "+"
    },
    "subtract": {
      "Name": "Subtract",
      "Description": "Subtracts elements in one array from another element by element.",
      "Type": "Arithmetic Operation",
      "Inputs": [
        { "name": "array1", "type": "numpy array", "target": true },
        { "name": "array2", "type": "numpy array", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Subtract the second array from the first element by element.",
        "Code": "np.subtract([10, 20, 30], [1, 2, 3])",
        "Result": "[9, 18, 27]"
      },
      "Value": "-"
    },
    "multiply": {
      "Name": "Multiply",
      "Description": "Multiplies numbers in two arrays element by element.",
      "Type": "Arithmetic Operation",
      "Inputs": [
        { "name": "array1", "type": "numpy array", "target": true },
        { "name": "array2", "type": "numpy array", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Multiply two arrays element by element.",
        "Code": "np.multiply([1, 2, 3], [4, 5, 6])",
        "Result": "[4, 10, 18]"
      },
      "Value": "*"
    },
    "divide": {
      "Name": "Divide",
      "Description": "Divides elements in one array by another element by element.",
      "Type": "Arithmetic Operation",
      "Inputs": [
        { "name": "array1", "type": "numpy array", "target": true },
        { "name": "array2", "type": "numpy array", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Divide the first array by the second element by element.",
        "Code": "np.divide([10, 20, 30], [2, 4, 5])",
        "Result": "[5.0, 5.0, 6.0]"
      },
      "Value": "/"
    },
    "power": {
      "Name": "Power",
      "Description": "Raises each element in the first array to the power of the corresponding element in the second array.",
      "Type": "Arithmetic Operation",
      "Inputs": [
        { "name": "array1", "type": "numpy array", "target": true },
        { "name": "array2", "type": "numpy array", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Raise elements in the first array to the power of elements in the second.",
        "Code": "np.power([2, 3, 4], [1, 2, 3])",
        "Result": "[2, 9, 64]"
      },
      "Value": "**"
    },
    "Logical AND": {
      "Name": "Logical AND",
      "Description": "Performs an element-wise logical AND operation between two arrays.",
      "Type": "Logical Operation",
      "Value": "logical_and",
      "Inputs": [
        {
          "name": "array1",
          "type": "array of booleans",
          "target": true
        },
        {
          "name": "array2",
          "type": "array of booleans",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "result",
          "type": "array of booleans",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Checks if elements in two conditions are both true.",
        "Code": "np.logical_and([True, False, True], [True, True, False])",
        "Result": "[True, False, False]"
      }
    },
    "Logical OR": {
      "Name": "Logical OR",
      "Description": "Performs an element-wise logical OR operation between two arrays.",
      "Type": "Logical Operation",
      "Value": "logical_or",
      "Inputs": [
        {
          "name": "array1",
          "type": "array of booleans",
          "target": true
        },
        {
          "name": "array2",
          "type": "array of booleans",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "result",
          "type": "array of booleans",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Checks if at least one condition is true.",
        "Code": "np.logical_or([True, False, True], [True, True, False])",
        "Result": "[True, True, True]"
      }
    },
    "Logical NOT": {
      "Name": "Logical NOT",
      "Description": "Performs a logical NOT operation on each element of an array.",
      "Type": "Logical Operation",
      "Value": "logical_not",
      "Inputs": [
        {
          "name": "array",
          "type": "array of booleans",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "result",
          "type": "array of booleans",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Negates each boolean value in the array.",
        "Code": "np.logical_not([True, False, True])",
        "Result": "[False, True, False]"
      }
    },
    "Logical XOR": {
      "Name": "Logical XOR",
      "Description": "Performs an element-wise logical XOR operation between two arrays.",
      "Type": "Logical Operation",
      "Value": "logical_xor",
      "Inputs": [
        {
          "name": "array1",
          "type": "array of booleans",
          "target": true
        },
        {
          "name": "array2",
          "type": "array of booleans",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "result",
          "type": "array of booleans",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Checks if exactly one of the conditions is true.",
        "Code": "np.logical_xor([True, False, True], [True, True, False])",
        "Result": "[False, True, True]"
      }
    },
    "Is In": {
      "Name": "Is In",
      "Description": "Checks if elements of one array are present in another array.",
      "Type": "Logical Operation",
      "Value": "isin",
      "Inputs": [
        {
          "name": "array",
          "type": "array of values",
          "target": true
        },
        {
          "name": "values",
          "type": "list of values",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "result",
          "type": "array of booleans",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Checks if elements are in the given list.",
        "Code": "np.isin([1, 2, 3], [1, 3, 5])",
        "Result": "[True, False, True]"
      }
    },
    "Any": {
      "Name": "Any",
      "Description": "Checks if any element in the array evaluates to True.",
      "Type": "Logical Operation",
      "Value": "any",
      "Inputs": [
        {
          "name": "array",
          "type": "array of booleans",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "result",
          "type": "boolean",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Checks if any value in the array is True.",
        "Code": "np.any([False, False, True])",
        "Result": "True"
      }
    },
    "All": {
      "Name": "All",
      "Description": "Checks if all elements in the array evaluate to True.",
      "Type": "Logical Operation",
      "Value": "all",
      "Inputs": [
        {
          "name": "array",
          "type": "array of booleans",
          "target": true
        }
      ],
      "Outputs": [
        {
          "name": "result",
          "type": "boolean",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Checks if all values in the array are True.",
        "Code": "np.all([True, True, True])",
        "Result": "True"
      }
    }
  },
  "Statistics_&_Aggregations": {
    "sum": {
      "Name": "Sum",
      "Description": "Compute the sum of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Calculate the sum of the elements in the array.",
        "Code": "np.sum([1, 2, 3, 4])",
        "Result": "10"
      }
    },
    "prod": {
      "Name": "Product",
      "Description": "Compute the product of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Calculate the product of the elements in the array.",
        "Code": "np.prod([1, 2, 3, 4])",
        "Result": "24"
      }
    },
    "mean": {
      "Name": "Mean",
      "Description": "Compute the mean (average) of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Calculate the mean of the array elements.",
        "Code": "np.mean([1, 2, 3, 4])",
        "Result": "2.5"
      }
    },
    "median": {
      "Name": "Median",
      "Description": "Compute the median of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Calculate the median of the array.",
        "Code": "np.median([1, 2, 3, 4])",
        "Result": "2.5"
      }
    },
    "std": {
      "Name": "Standard Deviation",
      "Description": "Compute the standard deviation of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Calculate the standard deviation of the array elements.",
        "Code": "np.std([1, 2, 3, 4])",
        "Result": "1.118033988749895"
      }
    },
    "var": {
      "Name": "Variance",
      "Description": "Compute the variance of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Calculate the variance of the array elements.",
        "Code": "np.var([1, 2, 3, 4])",
        "Result": "1.25"
      }
    },
    "min": {
      "Name": "Minimum",
      "Description": "Find the minimum value in the array.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Find the minimum element in the array.",
        "Code": "np.min([1, 2, 3, 4])",
        "Result": "1"
      }
    },
    "max": {
      "Name": "Maximum",
      "Description": "Find the maximum value in the array.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Find the maximum element in the array.",
        "Code": "np.max([1, 2, 3, 4])",
        "Result": "4"
      }
    },
    "ptp": {
      "Name": "Peak-to-Peak",
      "Description": "Compute the range (max - min) of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Calculate the range (max - min) of array elements.",
        "Code": "np.ptp([1, 2, 3, 4])",
        "Result": "3"
      }
    },
    "cumsum": {
      "Name": "Cumulative Sum",
      "Description": "Compute the cumulative sum of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Calculate the cumulative sum of the array.",
        "Code": "np.cumsum([1, 2, 3, 4])",
        "Result": "[1, 3, 6, 10]"
      }
    },
    "cumprod": {
      "Name": "Cumulative Product",
      "Description": "Compute the cumulative product of array elements.",
      "Type": "Aggregation",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Calculate the cumulative product of the array.",
        "Code": "np.cumprod([1, 2, 3, 4])",
        "Result": "[1, 2, 6, 24]"
      }
    }
  },
  "Broadcasting_&_Copying": {
    "tile": {
      "Name": "Tile",
      "Description": "Repeat an array along specified axes.",
      "Type": "Broadcasting",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "reps", "type": "list of integers", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Repeat an array along axes.",
        "Code": "np.tile([1, 2], 2)",
        "Result": "[1, 2, 1, 2]"
      }
    },
    "repeat": {
      "Name": "Repeat",
      "Description": "Repeat elements of an array.",
      "Type": "Broadcasting",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "repeats", "type": "integer", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Repeat each element in the array a given number of times.",
        "Code": "np.repeat([1, 2], 2)",
        "Result": "[1, 1, 2, 2]"
      }
    },
    "copy": {
      "Name": "Copy",
      "Description": "Create a copy of the array.",
      "Type": "Copying",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Create a copy of an array.",
        "Code": "np.copy([1, 2, 3])",
        "Result": "[1, 2, 3]"
      }
    }
  },
  "Linear_Algebra": {
    "inv": {
      "Name": "Inverse",
      "Description": "Compute the inverse of a matrix.",
      "Type": "Linear Algebra",
      "Inputs": [{ "name": "matrix", "type": "2D numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "2D numpy array", "source": true }],
      "Example": {
        "Explanation": "Compute the inverse of a matrix.",
        "Code": "np.linalg.inv([[1, 2], [3, 4]])",
        "Result": "[[-2. ,  1. ], [ 1.5, -0.5]]"
      }
    },
    "det": {
      "Name": "Determinant",
      "Description": "Compute the determinant of a matrix.",
      "Type": "Linear Algebra",
      "Inputs": [{ "name": "matrix", "type": "2D numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "number", "source": true }],
      "Example": {
        "Explanation": "Calculate the determinant of a matrix.",
        "Code": "np.linalg.det([[1, 2], [3, 4]])",
        "Result": "-2.0"
      }
    },
    "eig": {
      "Name": "Eigenvalues and Eigenvectors",
      "Description": "Compute the eigenvalues and eigenvectors of a matrix.",
      "Type": "Linear Algebra",
      "Inputs": [{ "name": "matrix", "type": "2D numpy array", "target": true }],
      "Outputs": [
        { "name": "eigenvalues", "type": "numpy array", "source": true },
        { "name": "eigenvectors", "type": "numpy array", "source": true }
      ],
      "Example": {
        "Explanation": "Calculate the eigenvalues and eigenvectors of a matrix.",
        "Code": "np.linalg.eig([[1, 2], [3, 4]])",
        "Result": "Eigenvalues: [-0.37228132  5.37228132], Eigenvectors: [[-0.82456484 -0.41597356], [ 0.56576746 -0.90937683]]"
      }
    },
    "svd": {
      "Name": "Singular Value Decomposition",
      "Description": "Compute the singular value decomposition of a matrix.",
      "Type": "Linear Algebra",
      "Inputs": [{ "name": "matrix", "type": "2D numpy array", "target": true }],
      "Outputs": [
        { "name": "U", "type": "2D numpy array", "source": true },
        { "name": "S", "type": "1D numpy array", "source": true },
        { "name": "Vt", "type": "2D numpy array", "source": true }
      ],
      "Example": {
        "Explanation": "Compute the singular value decomposition of a matrix.",
        "Code": "np.linalg.svd([[1, 2], [3, 4]])",
        "Result": "U: [[-0.40455358 -0.9145143 ], [-0.9145143   0.40455358]], S: [5.4649857  0.36596619], Vt: [[-0.57604844 -0.81741556], [-0.81741556  0.57604844]]"
      }
    }
  },
  "Random_Sampling": {
    "random.random": {
      "Name": "Random Float",
      "Description": "Generate random floats in the range [0.0, 1.0).",
      "Type": "Random Sampling",
      "Inputs": [
        {
          "name": "size",
          "type": "integer or tuple of integers",
          "target": false,
          "description": "The shape of the array to be generated. Defaults to a single float if not specified."
        }
      ],
      "Outputs": [
        {
          "name": "result",
          "type": "numpy array or float",
          "source": true
        }
      ],
      "Example": {
        "Explanation": "Generate a 2x3 array of random floats in the range [0.0, 1.0).",
        "Code": "np.random.random((2, 3))",
        "Result": "[[0.5488, 0.7152, 0.6028], [0.5448, 0.4237, 0.6459]]"
      }
    },
    "random.randint": {
      "Name": "Random Integer",
      "Description": "Generate random integers within a specified range.",
      "Type": "Random Sampling",
      "Inputs": [
        { "name": "low", "type": "integer", "target": true },
        { "name": "high", "type": "integer", "target": true },
        { "name": "size", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Generate a random integer between 0 and 10.",
        "Code": "np.random.randint(0, 10)",
        "Result": "3"
      }
    },
    "random.choice": {
      "Name": "Random Choice",
      "Description": "Randomly select elements from an array.",
      "Type": "Random Sampling",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "size", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Randomly select two elements from the array.",
        "Code": "np.random.choice([1, 2, 3, 4], size=2)",
        "Result": "[2, 3]"
      }
    },
    "random.shuffle": {
      "Name": "Shuffle",
      "Description": "Shuffle the elements of an array in-place.",
      "Type": "Random Sampling",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Shuffle the elements of the array.",
        "Code": "np.random.shuffle([1, 2, 3, 4])",
        "Result": "[4, 3, 1, 2] // Note: result varies since it's randomized"
      }
    }
  },
  "Miscellaneous": {
    "unique": {
      "Name": "Unique Elements",
      "Description": "Find unique elements in an array.",
      "Type": "Miscellaneous",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Find the unique elements in the array.",
        "Code": "np.unique([1, 2, 2, 3, 4, 4, 5])",
        "Result": "[1 2 3 4 5]"
      }
    },
    "clip": {
      "Name": "Clip",
      "Description": "Limit values of an array to a specified range.",
      "Type": "Miscellaneous",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "min", "type": "number", "target": true },
        { "name": "max", "type": "number", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Clip the array values to the range [2, 4].",
        "Code": "np.clip([1, 2, 3, 4, 5], 2, 4)",
        "Result": "[2 2 3 4 4]"
      }
    },
    "tile": {
      "Name": "Tile",
      "Description": "Repeat an array along specified axes.",
      "Type": "Miscellaneous",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "reps", "type": "list of integers", "target": true }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Repeat an array along axes.",
        "Code": "np.tile([1, 2], 2)",
        "Result": "[1, 2, 1, 2]"
      }
    },
    "meshgrid": {
      "Name": "Meshgrid",
      "Description": "Create coordinate grids from arrays.",
      "Type": "Miscellaneous",
      "Inputs": [
        { "name": "x", "type": "numpy array", "target": true },
        { "name": "y", "type": "numpy array", "target": true }
      ],
      "Outputs": [
        { "name": "X", "type": "numpy array", "source": true },
        { "name": "Y", "type": "numpy array", "source": true }
      ],
      "Example": {
        "Explanation": "Create a meshgrid from x and y.",
        "Code": "np.meshgrid([1, 2], [3, 4])",
        "Result": "X: [[1 2], [1 2]], Y: [[3 3], [4 4]]"
      }
    },
    "round": {
      "Name": "Round",
      "Description": "Round the elements of an array to the specified number of decimals.",
      "Type": "Miscellaneous",
      "Inputs": [
        { "name": "array", "type": "numpy array", "target": true },
        { "name": "decimals", "type": "integer", "target": false }
      ],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Round the array values to 1 decimal place.",
        "Code": "np.round([1.234, 2.345], 1)",
        "Result": "[1.2, 2.3]"
      }
    },
    "floor": {
      "Name": "Floor",
      "Description": "Return the largest integer less than or equal to each element.",
      "Type": "Miscellaneous",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Floor the array elements.",
        "Code": "np.floor([1.2, 2.8])",
        "Result": "[1. 2.]"
      }
    },
    "ceil": {
      "Name": "Ceiling",
      "Description": "Return the smallest integer greater than or equal to each element.",
      "Type": "Miscellaneous",
      "Inputs": [{ "name": "array", "type": "numpy array", "target": true }],
      "Outputs": [{ "name": "result", "type": "numpy array", "source": true }],
      "Example": {
        "Explanation": "Ceiling the array elements.",
        "Code": "np.ceil([1.2, 2.8])",
        "Result": "[2. 3.]"
      }
    }
  }
}
